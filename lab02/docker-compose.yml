# FIWARE + SCADABR

version: "3.8" # Version for the docker compose
services:

  # Orion is the context broker
  orion:
    image: fiware/orion:3.7.0 # Loads this image from Docker Hub
    hostname: orion # Create a hostname to be easier to find the container in the network
    container_name: fiware-orion # Create a container name to be easier to get information for it
    depends_on:
      - mongo-db # Database for persinting eantity information from orion
    networks:
      - default # Users a local network called default
    ports:
      - "1026:1026" # match port 1026 on the machine to the one in the container
    command: -dbhost mongo-db -logLevel DEBUG -noCache
    healthcheck: # check if orion is healthy
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 10s

  # Databases
  mongo-db:
    image: mongo:4.4 # Loads this image from Docker Hub
    hostname: mongo-db # Create a hostname to be easier to find the container in the network
    container_name: db-mongo # Create a container name to be easier to get information for it
    expose:
      - "27017" # Expose this port to the network
    ports:
      - "27017:27017" # match port 27017 on the machine to the one in the container
    networks:
      - default # Users a local network called default
    volumes: # Uses a volume to persit the data in the database
      - ./db/mongo/data:/data
      # - mongo-db:/data
    healthcheck: # check if Mongo DB is healthy
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

  # Iot Agent JSON
  iot-agent-json:
    image: fiware/iotagent-json # Loads this image from docker hub
    hostname: fiware-iot-agent-json
    container_name: fiware-iot-agent-json
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - "4041"
      - "7896"
    ports:
      - "4041:4041" # localhost:4041
      - "7896:7896" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=1026 # port the context broker listens on to update context
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_DEFAULT_EXPRESSION_LANGUAGE=jexl
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent-json:4041
      - IOTA_DEFAULT_RESOURCE=/iot/json
    healthcheck:
      interval: 10s

  # Iot Agent MQTT
  # iot-agent-ul:
  #   image: fiware/iotagent-ul
  #   hostname: iot-agent-ul
  #   container_name: fiware-iot-agent-ul
  #   depends_on:
  #     - mongo-db
  #     - mosquitto
  #   networks:
  #     - default
  #   expose:
  #     - "4042"
  #   ports:
  #     - "4042:4042" # localhost:4042
  #   environment:
  #     - IOTA_CB_HOST=orion # name of the context broker to update context
  #     - IOTA_CB_PORT=1026 # port the context broker listens on to update context
  #     - IOTA_NORTH_PORT=4042
  #     - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
  #     - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
  #     - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
  #     - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
  #     - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
  #     - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
  #     - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
  #     - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
  #     - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
  #     - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
  #     - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
  #     - IOTA_PROVIDER_URL=http://iot-agent-ul:4042
  #     - IOTA_DEFAULT_TRANSPORT=MQTT
  #   healthcheck:
  #     interval: 5s

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:1.6.14
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - default

  # Persistence Data Base
  cygnus:
    image: fiware/cygnus-ngsi:2.16.0
    hostname: cygnus
    container_name: fiware-cygnus
    networks:
      - default
    depends_on:
      - mysql-db
    expose:
      - "5050"
      - "5080"
    ports:
      - "5050:5050" # localhost:5050
      - "5080:5080" # localhost:5080
    environment:
      - "CYGNUS_MYSQL_SERVICE_PORT=5050" # Notification Port that Cygnus listens when subcribing to context data changes
      - "CYGNUS_MYSQL_HOST=mysql-db" # Hostname of the MySQL server used to persist historical context data
      - "CYGNUS_MYSQL_PORT=3306" # Port that the MySQL server uses to listen to commands
      - "CYGNUS_MYSQL_USER=root" # Username for the MySQL database user
      - "CYGNUS_MYSQL_PASS=root" # Password for the MySQL database user
      - "CYGNUS_SERVICE_PORT=5050"
      - "CYGNUS_API_PORT=5080" # Port that Cygnus listens on for operational reasons
      - "CYGNUS_LOG_LEVEL=DEBUG" # The logging level for Cygnus
    healthcheck:
      test: curl --fail -s http://localhost:5080/v1/version || exit 1

  mysql-db:
    restart: always
    image: mysql:5.7
    hostname: mysql-db
    container_name: db-mysql
    expose:
      - "3306"
    ports:
      - "3306:3306" # localhost:3306
    networks:
      default:
        aliases:
          - "database"
    environment:
      - "MYSQL_ROOT_PASSWORD=root"
      - "MYSQL_ROOT_HOST=%"
      - "MYSQL_DATABASE=scadalts"
    volumes:
      - ./db/mysql/data:/var/lib/mysql
      # - mysql-db:/var/lib/mysql

  # grafana:
  #   image: grafana/grafana
  #   hostname: grafana
  #   container_name: grafana
  #   depends_on:
  #       - mysql-db
  #   ports:
  #       - "3000:3000"

  scadalts:
    image: scadalts/scadalts:latest
    container_name: scadalts
    hostname: scadalts
    environment:
      - CATALINA_OPTS=-Xmx512m -Xms512m
    ports:
      - "8080:8080"
    depends_on:
      - mysql-db
      - mosquitto
    # links:
    #   - mysql-db:database      
    expose:
      - "8080:8000"
    volumes:
      - ./db/tomcat/log:/usr/local/tomcat/logs:rw
    networks:
      - default
    command:
      - /usr/bin/wait-for-it
      - --host=mysql-db
      - --port=3306
      - --timeout=990
      - --strict
      - --
      - /usr/local/tomcat/bin/catalina.sh
      - run

networks:
  default:
    driver: bridge
  
# volumes: # Creates a volume to persit the data in the database
#   mongo-db: ~
#   mysql-db: ~